{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mahit\\\\OneDrive\\\\Documents\\\\WebDesign\\\\react_assignment\\\\routing\\\\src\\\\days.js\";\nimport React from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'; //import DetailedInfo from './detailedInfo'\n//const   DetailedInfo=({match}) => <div> {match.params.id}</div>\n\nconst DetailedInfo = props => {\n  //  console.log(location);\n  const data = JSON.parse(props.comments);\n\n  const getHour = time => time ? new Date(time).getHours() : new Date().getHours();\n\n  const getDate = date => date ? new Date(date).getDate() : new Date().getDate();\n\n  const displayMoreInfo = (item, i) => {\n    return React.createElement(\"div\", {\n      className: \"hourly-info\",\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"hour-temperature\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, `${Math.round(item.main.temp)}°C`), React.createElement(\"div\", {\n      className: \"hour-of-the-day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, `${getHour(item.dt * 1000)}:00`));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"hourly\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, data.map((item, i) => getHour(item.dt * 1000) > getHour() && getDate(item.dt * 1000) === getDate() ? displayMoreInfo(item, i) : getHour(item.dt * 1000) >= 5 && getHour(item.dt * 1000) <= 23 ? displayMoreInfo(item, i) : null));\n}; //var x=props.city;\n//alert(x);\n//const Days = props => (\n\n\nclass Days extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._getDayInfo = data => {\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\n    };\n\n    this._getInfo = data => {\n      const min = [];\n      const max = [];\n      data.map(item => {\n        max.push(item.main.temp_max);\n        min.push(item.main.temp_min);\n      });\n      const minMax = {\n        min: Math.round(Math.min(...min)),\n        max: Math.round(Math.max(...max))\n      };\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, `${minMax.min} and ${minMax.max}`);\n    };\n\n    console.log(this.props);\n    /*this.state={\r\n        data: []\r\n      }*/\n  }\n\n  /*\r\n    getHour = (time) => {return(time ? new Date(time).getHours() : new Date().getHours());};\r\n  getDate = (date) =>{return(date ? new Date(date).getDate() : new Date().getDate());};\r\n  displayMoreInfo = (item, i) => {\r\n    return (\r\n        <p>\r\n          {`${Math.round(item.main.temp)}°C`}\r\n       \r\n          {`${getHour(item.dt * 1000)}:00`}\r\n        </p>\r\n    );\r\n  };\r\n  */\n  render() {\n    //const { url } = this.props.match\n    // Edge case:\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\n    // this ensures that we are showing only 5-days of forecast.\n    // const forecastTiles = this.props.tiles.length > 5 ? this.props.tiles.slice(0, 5) : this.props.tiles;\n    const forecastTiles = this.props.tiles;\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"5 Day weather forecast\"), React.createElement(\"table\", {\n      border: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"DAY\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"DESCRIPTION\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Min_Temp\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Max_temp\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"ICON\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, forecastTiles.map(item => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, console.log(item), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \" \", React.createElement(Link, {\n      to: {\n        pathname: `/days/${this._getDayInfo(item)}`,\n        query: {\n          comments: JSON.stringify(item)\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this._getDayInfo(item))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, item[0].weather[0].description), this._getInfo(item), \";\", React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: `https://openweathermap.org/img/w/${item[0].weather[0].icon}.png`,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })))))), React.createElement(Route, {\n      path: \"/days/:id\",\n      component: DetailedInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Days;","map":{"version":3,"sources":["C:/Users/mahit/OneDrive/Documents/WebDesign/react_assignment/routing/src/days.js"],"names":["React","Route","Link","BrowserRouter","Router","DetailedInfo","props","data","JSON","parse","comments","getHour","time","Date","getHours","getDate","date","displayMoreInfo","item","i","Math","round","main","temp","dt","map","Days","Component","constructor","_getDayInfo","daysOfWeek","getDay","_getInfo","min","max","push","temp_max","temp_min","minMax","console","log","render","forecastTiles","tiles","pathname","query","stringify","weather","description","icon"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Route, Link,BrowserRouter as Router} from 'react-router-dom'\r\n//import DetailedInfo from './detailedInfo'\r\n\r\n//const   DetailedInfo=({match}) => <div> {match.params.id}</div>\r\n\r\nconst DetailedInfo = props => {\r\n  //  console.log(location);\r\nconst data=JSON.parse(props.comments);\r\n    const getHour = time => time ? new Date(time).getHours() : new Date().getHours();\r\n    const getDate = date => date ? new Date(date).getDate() : new Date().getDate();\r\n  \r\n    const displayMoreInfo = (item, i) => {\r\n      return (\r\n        <div className=\"hourly-info\" key={i}>\r\n          <div className=\"hour-temperature\">\r\n            {`${Math.round(item.main.temp)}°C`}\r\n          </div>\r\n          <div className=\"hour-of-the-day\">\r\n            {`${getHour(item.dt * 1000)}:00`}\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n  \r\n    return (\r\n      <div className=\"hourly\">\r\n        {data.map((item, i) => (\r\n          (getHour(item.dt * 1000) > getHour() && getDate(item.dt * 1000) === getDate()) ? (\r\n            displayMoreInfo(item, i)\r\n           ) : getHour(item.dt * 1000) >= 5 && getHour(item.dt * 1000) <= 23 ? (\r\n              displayMoreInfo(item, i)\r\n           ) : null\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n//var x=props.city;\r\n//alert(x);\r\n//const Days = props => (\r\nclass Days extends React.Component{\r\n  \r\nconstructor(props){\r\n    super(props);\r\n    console.log(this.props);\r\n    /*this.state={\r\n        data: []\r\n      }*/\r\n}\r\n      _getDayInfo = data => {\r\n        const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n        return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n      };\r\n\r\n\r\n  _getInfo = (data) => {\r\n    const min=[];\r\n     const max=[];\r\n    data.map(item => {\r\n      max.push(item.main.temp_max);\r\n      min.push(item.main.temp_min);\r\n    });\r\n\r\n    const minMax = {\r\n      min: Math.round(Math.min(...min)),\r\n      max: Math.round(Math.max(...max)),\r\n    };\r\n  return (\r\n    <td>{`${minMax.min} and ${minMax.max}`}</td>\r\n  );}\r\n\r\n  /*\r\n\r\n  getHour = (time) => {return(time ? new Date(time).getHours() : new Date().getHours());};\r\n  getDate = (date) =>{return(date ? new Date(date).getDate() : new Date().getDate());};\r\n  displayMoreInfo = (item, i) => {\r\n    return (\r\n        <p>\r\n          {`${Math.round(item.main.temp)}°C`}\r\n       \r\n          {`${getHour(item.dt * 1000)}:00`}\r\n        </p>\r\n    );\r\n  };\r\n  */\r\n\r\n    render(){\r\n        //const { url } = this.props.match\r\n\r\n        \r\n\r\n    // Edge case:\r\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\r\n    // this ensures that we are showing only 5-days of forecast.\r\n    \r\n   // const forecastTiles = this.props.tiles.length > 5 ? this.props.tiles.slice(0, 5) : this.props.tiles;\r\n   const forecastTiles=this.props.tiles;\r\n    \r\n\r\n    return (\r\n        <Router>\r\n          <div>\r\n            <h1>5 Day weather forecast</h1>\r\n           \r\n            <table border='1'>\r\n                <thead>\r\n                <tr>\r\n                    <th>DAY</th>\r\n                    <th>DESCRIPTION</th>\r\n                    <th>Min_Temp</th>\r\n                    <th>Max_temp</th>\r\n                    <th>ICON</th>\r\n                </tr></thead>\r\n                <tbody>\r\n         \r\n                {forecastTiles.map((item) =>  (<tr>\r\n                   { console.log(item)}\r\n                      <td > <Link to={{\r\n                        pathname :`/days/${this._getDayInfo(item)}`,\r\n                        query: {\r\n                            \r\n                            comments: JSON.stringify(item)\r\n                          } }\r\n}>\r\n                        {this._getDayInfo(item)}</Link></td>\r\n                    <td>{item[0].weather[0].description}</td>\r\n                    {this._getInfo(item)};\r\n                    <td><img src={`https://openweathermap.org/img/w/${item[0].weather[0].icon}.png`} alt=\"\"></img></td>\r\n                </tr>) )\r\n                }\r\n                  </tbody>\r\n            </table>\r\n            \r\n    <Route path=\"/days/:id\" component={DetailedInfo} />\r\n          </div>\r\n          </Router>\r\n    );\r\n    }\r\n            \r\n}\r\n      \r\n    export default Days"]},"metadata":{},"sourceType":"module"}