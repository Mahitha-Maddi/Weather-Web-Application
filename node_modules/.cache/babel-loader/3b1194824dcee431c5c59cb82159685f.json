{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mahit\\\\OneDrive\\\\Documents\\\\WebDesign\\\\react_assignment\\\\routing\\\\src\\\\days.js\";\nimport React from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport DetailedInfo from './detailedInfo'; //const   DetailedInfo=({match}) => <div> {match.params.id}</div>\n\n/*\r\nconst DetailedInfo = props => {\r\n  //  console.log(location);\r\n  if (typeof props.comments !== 'undefined') {\r\n  data=JSON.parse(props.comments);\r\n  }\r\n    const getHour = time => time ? new Date(time).getHours() : new Date().getHours();\r\n    const getDate = date => date ? new Date(date).getDate() : new Date().getDate();\r\n  \r\n    const displayMoreInfo = (item, i) => {\r\n      return (\r\n        <div>\r\n            {`${Math.round(item.main.temp)}Â°C` `${getHour(item.dt * 1000)}:00`}\r\n          </div>\r\n      \r\n      );\r\n    };\r\n  \r\n    return (\r\n      <div >\r\n        {data.map((item, i) => (\r\n          (getHour(item.dt * 1000) > getHour() && getDate(item.dt * 1000) === getDate()) ? (\r\n            displayMoreInfo(item, i)\r\n           ) : getHour(item.dt * 1000) >= 5 && getHour(item.dt * 1000) <= 23 ? (\r\n              displayMoreInfo(item, i)\r\n           ) : null\r\n        ))}\r\n      </div>\r\n    );\r\n  };*/\n//var x=props.city;\n//alert(x);\n//const Days = props => (\n\nclass Days extends React.Component {\n  constructor(props) {\n    super(props); //console.log(this.props);\n\n    this._getDayInfo = data => {\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\n    };\n\n    this._getInfo = data => {\n      const min = [];\n      const max = [];\n      data.map(item => {\n        max.push(item.main.temp_max);\n        min.push(item.main.temp_min);\n      });\n      const minMax = {\n        min: Math.round(Math.min(...min)),\n        max: Math.round(Math.max(...max))\n      };\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, `${minMax.min}/ ${minMax.max}`);\n    };\n\n    this.hello = () => {\n      const forecastTiles = this.props.tiles;\n      this.setState({\n        data: forecastTiles\n      });\n    };\n\n    this.state = {\n      data: []\n    };\n    console.log(this.state.data);\n  }\n\n  render() {\n    //const { url } = this.props.match\n    // Edge case:\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\n    // this ensures that we are showing only 5-days of forecast.\n    // const forecastTiles = this.props.tiles.length > 5 ? this.props.tiles.slice(0, 5) : this.props.tiles;\n    const forecastTiles = this.props.tiles; // console.log(forecastTiles);\n\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"5 Day weather forecast\"), React.createElement(\"table\", {\n      border: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"DAY\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"DESCRIPTION\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Min_Temp/Max_Temp\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"ICON\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, forecastTiles.map(item => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \" \", React.createElement(Link, {\n      to: {\n        pathname: `/days/${this._getDayInfo(item)}`\n      },\n      onClick: () => this.hello(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this._getDayInfo(item))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, item[0].weather[0].description), this._getInfo(item), \";\", React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: `https://openweathermap.org/img/w/${item[0].weather[0].icon}.png`,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })))))), React.createElement(Route, {\n      path: \"/days/:id\",\n      component: props => React.createElement(DetailedInfo, {\n        data: this.state.data,\n        id: props.match.params.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Days;","map":{"version":3,"sources":["C:/Users/mahit/OneDrive/Documents/WebDesign/react_assignment/routing/src/days.js"],"names":["React","Route","Link","BrowserRouter","Router","DetailedInfo","Days","Component","constructor","props","_getDayInfo","data","daysOfWeek","Date","dt","getDay","_getInfo","min","max","map","item","push","main","temp_max","temp_min","minMax","Math","round","hello","forecastTiles","tiles","setState","state","console","log","render","pathname","weather","description","icon","match","params","id"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Route, Link,BrowserRouter as Router} from 'react-router-dom'\r\nimport DetailedInfo from './detailedInfo'\r\n\r\n//const   DetailedInfo=({match}) => <div> {match.params.id}</div>\r\n/*\r\nconst DetailedInfo = props => {\r\n  //  console.log(location);\r\n  if (typeof props.comments !== 'undefined') {\r\n  data=JSON.parse(props.comments);\r\n  }\r\n    const getHour = time => time ? new Date(time).getHours() : new Date().getHours();\r\n    const getDate = date => date ? new Date(date).getDate() : new Date().getDate();\r\n  \r\n    const displayMoreInfo = (item, i) => {\r\n      return (\r\n        <div>\r\n            {`${Math.round(item.main.temp)}Â°C` `${getHour(item.dt * 1000)}:00`}\r\n          </div>\r\n      \r\n      );\r\n    };\r\n  \r\n    return (\r\n      <div >\r\n        {data.map((item, i) => (\r\n          (getHour(item.dt * 1000) > getHour() && getDate(item.dt * 1000) === getDate()) ? (\r\n            displayMoreInfo(item, i)\r\n           ) : getHour(item.dt * 1000) >= 5 && getHour(item.dt * 1000) <= 23 ? (\r\n              displayMoreInfo(item, i)\r\n           ) : null\r\n        ))}\r\n      </div>\r\n    );\r\n  };*/\r\n//var x=props.city;\r\n//alert(x);\r\n//const Days = props => (\r\nclass Days extends React.Component{\r\n  \r\nconstructor(props){\r\n    super(props);\r\n    //console.log(this.props);\r\n    this.state={\r\n        data:[]\r\n      \r\n}\r\nconsole.log(this.state.data)}\r\n      _getDayInfo = data => {\r\n        const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n        return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n      };\r\n\r\n\r\n  _getInfo = (data) => {\r\n    const min=[];\r\n     const max=[];\r\n    data.map(item => {\r\n      max.push(item.main.temp_max);\r\n      min.push(item.main.temp_min);\r\n    });\r\n\r\n    const minMax = {\r\n      min: Math.round(Math.min(...min)),\r\n      max: Math.round(Math.max(...max)),\r\n    };\r\n  return (\r\n    <td>{`${minMax.min}/ ${minMax.max}`}</td>\r\n  );}\r\n\r\n  /*\r\n\r\n  getHour = (time) => {return(time ? new Date(time).getHours() : new Date().getHours());};\r\n  getDate = (date) =>{return(date ? new Date(date).getDate() : new Date().getDate());};\r\n  displayMoreInfo = (item, i) => {\r\n    return (\r\n        <p>\r\n          {`${Math.round(item.main.temp)}Â°C`}\r\n       \r\n          {`${getHour(item.dt * 1000)}:00`}\r\n        </p>\r\n    );\r\n  };\r\n  */\r\n\r\n hello=()=>{\r\n     \r\n    const forecastTiles=this.props.tiles;\r\n    this.setState({\r\n        data: forecastTiles\r\n    });\r\n\r\n };\r\n    render(){\r\n        //const { url } = this.props.match\r\n\r\n        \r\n\r\n    // Edge case:\r\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\r\n    // this ensures that we are showing only 5-days of forecast.\r\n    \r\n   // const forecastTiles = this.props.tiles.length > 5 ? this.props.tiles.slice(0, 5) : this.props.tiles;\r\n   const forecastTiles=this.props.tiles;\r\n  // console.log(forecastTiles);\r\n\r\n    return (\r\n        <Router>\r\n          <div>\r\n            <h1>5 Day weather forecast</h1>\r\n           \r\n            <table border='1'>\r\n                <thead>\r\n                <tr>\r\n                    <th>DAY</th>\r\n                    <th>DESCRIPTION</th>\r\n                    <th>Min_Temp/Max_Temp</th>\r\n                    <th>ICON</th>\r\n                </tr></thead>\r\n                <tbody>\r\n         \r\n                {forecastTiles.map((item) =>  (<tr>\r\n                   \r\n                      <td> <Link to={{\r\n                        pathname :`/days/${this._getDayInfo(item)}`,\r\n                        } \r\n}  onClick={() => this.hello()}>\r\n                        {this._getDayInfo(item)}</Link></td>\r\n                    <td>{item[0].weather[0].description}</td>\r\n                    {this._getInfo(item)};\r\n                    <td><img src={`https://openweathermap.org/img/w/${item[0].weather[0].icon}.png`} alt=\"\"></img></td>\r\n                </tr>) )\r\n                }\r\n                  </tbody>\r\n            </table>\r\n            \r\n    <Route path=\"/days/:id\" component={ (props)=> <DetailedInfo data={this.state.data} id={props.match.params.id}/>} />\r\n          </div>\r\n          </Router>\r\n    );\r\n    }\r\n\r\n   \r\n}        \r\n\r\n    export default Days"]},"metadata":{},"sourceType":"module"}